Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: COHORTE :: Remote Shell
Bundle-RequiredExecutionEnvironment: JavaSE-1.6
Bundle-SymbolicName: org.cohorte.shell.remote
Bundle-Vendor: COHORTE Technologies
Bundle-Version: 1.2.0
Created-By: iPOJO  1.8.0
Import-Package: org.apache.felix.ipojo, org.apache.felix.ipojo.archite
 cture, org.apache.felix.service.command;status=provisional, org.cohor
 te.shell, org.osgi.framework, org.osgi.service.cm, org.osgi.service.l
 og, org.osgi.util.tracker, org.psem2m.isolates.base, org.psem2m.isola
 tes.constants, org.psem2m.isolates.loggers, org.psem2m.utilities.logg
 ing
iPOJO-Components: component { $name="cohorte-remote-shell-factory" $cl
 assname="org.cohorte.remote.shell.RemoteShellService" provides { $spe
 cifications="{org.cohorte.shell.IRemoteShell}" property { $name="osgi
 .shell.telnet.ip" $field="pAddress" $value="127.0.0.1" }property { $n
 ame="osgi.shell.telnet.port" $field="pPort" $value="0" }}requires { $
 field="pCommandProcessor" }requires { $field="pLogger" }callback { $t
 ransition="invalidate" $method="invalidate" }callback { $transition="
 validate" $method="validate" }manipulation { $classname="org.cohorte.
 remote.shell.RemoteShellService" interface { $name="org.cohorte.shell
 .IRemoteShell" }field { $name="pAddress" $type="java.lang.String" }fi
 eld { $name="pCommandProcessor" $type="org.apache.felix.service.comma
 nd.CommandProcessor" }field { $name="pContext" $type="org.osgi.framew
 ork.BundleContext" }field { $name="pLogger" $type="org.psem2m.isolate
 s.base.IIsolateLoggerSvc" }field { $name="pPort" $type="int" }field {
  $name="pServer" $type="org.cohorte.remote.shell.Server" }method { $n
 ame="createGogoSession" $return="org.apache.felix.service.command.Com
 mandSession" $arguments="{java.io.InputStream,java.io.PrintStream,jav
 a.io.PrintStream}" $names="{aStdin,aStdout,aStderr}" }method { $name=
 "error" $arguments="{java.lang.String,java.lang.Object[]}" $names="{a
 What,aInfos}" }method { $name="getAddress" $return="java.lang.String"
  }method { $name="getPort" $return="int" }method { $name="invalidate"
  }method { $name="stopServer" }method { $name="validate" }method { $n
 ame="warning" $arguments="{java.lang.String,java.lang.Object[]}" $nam
 es="{aWhat,aInfos}" }}}

